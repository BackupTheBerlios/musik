/*
 *  MusikDefines.h
 *
 *  Global Defines and enums
 *  
 *  Copyright (c) 2003 Casey Langen (casey@bak.rr.com)
 *	Contributors: Simon Windmill, Dustin Carter, Gunnar Roth, Wade Brainerd
 *
 *  See the file "license.txt" for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL WARRANTIES.
*/

#ifndef MUSIKDEFINES_H
#define MUSIKDEFINES_H
#if wxVERSION_NUMBER >= 2500  
#define WXSYSTEMCOLOUR(x)	wxTheColourDatabase->Find(x)
#else
#define WXSYSTEMCOLOUR(x)	*wxTheColourDatabase->FindColour(x)
#endif
#ifndef max
#define max(a, b)   (((a) > (b)) ? (a) : (b))
#endif

//---------------//
//--- defines ---//
//---------------//
#define MUSIK_DND_ABOVE			0
#define MUSIK_DND_BELOW			1
#define MUSIK_SOURCES			9990
#define MUSIK_PLAYLIST			9991
#define MUSIK_ACTIVITYBOX1		9992
#define MUSIK_ACTIVITYBOX2		9993
#define	MUSIK_ACTIVITYBOX3		9994
#define	MUSIK_ACTIVITYBOX4		9995
#define	MUSIK_SIMPLEQUERY		9996
#define MUSIK_NOWPLAYING_TIMER	9997
#define MUSIK_ACTIVITYCTRL		9998
#define MUSIK_VERSION_STR		wxT("0.3.1 CVS")
#define MUSIKAPPNAME			wxT("wxMusik")
#define MUSIKAPPNAME_VERSION	MUSIKAPPNAME wxT(" ") MUSIK_VERSION_STR
#define MUSIKSERV_VERSION		MUSIKAPPNAME wxT("Serv ") MUSIK_VERSION_STR
//----------------------------------//
//--- path stuff ~/.Musik/ vs ./ ---//
//----------------------------------//
#include <wx/filename.h>
#define MUSIK_HOME_DIR 			wxFileName::GetHomeDir() + wxFileName::GetPathSeparator() + wxT( ".Musik" ) + wxFileName::GetPathSeparator()
#define MUSIK_PLAYLIST_DIR		wxGetApp().Prefs.sDataPath + wxT( "playlists" ) + wxFileName::GetPathSeparator()
#define MUSIK_DB_FILENAME		wxGetApp().Prefs.sDataPath + wxT( "musiklib.db" )
#define MUSIK_SOURCES_FILENAME	wxGetApp().Prefs.sDataPath + wxT( "musiksources.dat" )
#define MUSIK_PATHS_FILENAME	wxGetApp().Prefs.sDataPath + wxT( "musikpaths.dat" )
#define MUSIK_VERSION_FILENAME	wxGetApp().Prefs.sDataPath + wxT( "musikversion.dat" )
#define MUSIK_PLAYERLIST_FILENAME	wxGetApp().Prefs.sDataPath + wxT( "musikplayerlist.dat" )

	
//-------------------------------------------------//
//--- for some reason some versions of wx do	---//
//--- not have this macro. pulled straight from	---//
//--- hashmap.h of the cvs head					---//
//-------------------------------------------------//
#include <wx/hashmap.h>
#ifndef WX_CLEAR_HASH_MAP
	#define WX_CLEAR_HASH_MAP(type, hashmap)                                     \
		{                                                                        \
			type::iterator it, en;                                               \
			for( it = (hashmap).begin(), en = (hashmap).end(); it != en; ++it )  \
				delete it->second;                                               \
			(hashmap).clear();                                                   \
		}
#endif 
//-----------------------------------------//
//--- needed for vc++/gcc compatibility	---//
//-----------------------------------------//

#ifdef _MSC_VER
#define strncasecmp strnicmp
#define strcasecmp	stricmp 
#endif
//-------------------------//
//--- enumerated values ---//
//-------------------------//
enum EPLAYLISTCOLUMNS
{
	PLAYLISTCOLUMN_RATING = 0,
	PLAYLISTCOLUMN_TRACK,
	PLAYLISTCOLUMN_TITLE,
	PLAYLISTCOLUMN_ARTIST,
	PLAYLISTCOLUMN_ALBUM,
	PLAYLISTCOLUMN_YEAR,
	PLAYLISTCOLUMN_GENRE,
	PLAYLISTCOLUMN_TIMES_PLAYED,
	PLAYLISTCOLUMN_LAST_PLAYED,
	PLAYLISTCOLUMN_TIME,
	PLAYLISTCOLUMN_BITRATE,
	PLAYLISTCOLUMN_FILENAME,
	PLAYLISTCOLUMN_NOTES,
	PLAYLISTCOLUMN_TIMEADDED,
	NPLAYLISTCOLUMNS			//--- this is ALWAYS the last entry ---//
};

enum EMUSIK_ACTIVITY_SELECTION_TYPE
{
	MUSIK_SELECTION_TYPE_STANDARD = 0,
	MUSIK_SELECTION_TYPE_SLOPPY,
	MUSIK_SELECTION_TYPE_HIGHLIGHT,
	NMUSIK_SELECTION_TYPE
};

enum EMUSIK_THREAD_EVENTS
{
	MUSIK_LIBRARY_THREAD_START = 1000,
	MUSIK_LIBRARY_THREAD_END,
	MUSIK_LIBRARY_THREAD_PROG,
	MUSIK_LIBRARY_THREAD_SCAN_PROG,

	MUSIK_TAG_THREAD_START,
	MUSIK_TAG_THREAD_END,
	MUSIK_TAG_THREAD_PROG,

	MUSIK_FRAME_THREAD_START,
	MUSIK_FRAME_THREAD_END,
	MUSIK_FRAME_THREAD_PROG,
	MUSIK_FRAME_EXIT_FADE_DONE,

	MUSIK_ACTIVITY_RENAME_THREAD_START,
	MUSIK_ACTIVITY_RENAME_THREAD_END,
	MUSIK_ACTIVITY_RENAME_THREAD_PROG,

	MUSIK_PLAYLIST_THREAD_START,
	MUSIK_PLAYLIST_THREAD_END,
	MUSIK_PLAYLIST_THREAD_PROG,

	MUSIK_PLAYER_NEXT_SONG,
	MUSIK_PLAYER_FADE_COMPLETE,
	MUSIK_PLAYER_NEW_METADATA,
	MUSIK_PLAYER_STOP,
	MUSIK_PLAYER_PLAY_RESTART,
	MUSIK_PLAYER_RESUME,
	MUSIK_PLAYER_EXIT,

	MUSIK_LIBRARY_FILE_SCANNED
};

enum EMUSIK_THREAD_TYPE
{
	MUSIK_ACTIVITY_RENAME_THREAD = 0,
	MUSIK_PLAYLIST_RENAME_THREAD,
	MUSIK_PLAYLIST_RETAG_THREAD,
	MUSIK_LIBRARY_SCANNEW_THREAD,
	MUSIK_LIBRARY_UPDATE_THREAD,
	MUSIK_LIBRARY_PURGE_THREAD,
	MUSIK_TAG_SINGLE_THREAD,
	MUSIK_TAG_BATCH_THREAD,
	MUSIK_WRITE_DIRTY_THREAD
};

enum EMUSIK_MENU_ITEMS
{
	//--- main menu ---//
	MUSIK_MENU_PATHS = wxID_HIGHEST,
	MUSIK_MENU_WRITE,
	MUSIK_MENU_VIEW_DIRTY_TAGS,
	MUSIK_MENU_WRITE_TAGS,
	MUSIK_MENU_WRITE_CLEAR_DIRTY,
	MUSIK_MENU_PREFERENCES,
	MUSIK_MENU_FX,
  	MUSIK_MENU_EXIT,
	MUSIK_MENU_SOURCES_STATE,
	MUSIK_MENU_ACTIVITIES_STATE,
	MUSIK_MENU_PLAYLISTINFO_STATE,
	MUSIK_MENU_STAY_ON_TOP,
	MUSIK_MENU_CLEARDB,
	MUSIK_MENU_REBUILDDB,
	MUSIK_MENU_SIMPLEQUERY,
	MUSIK_MENU_CUSTOMQUERY,

	//--- playlist popup menu ---//
	MUSIK_PLAYLIST_CLEARPLAYERLIST,
	MUSIK_PLAYLIST_CONTEXT_PLAYNODE,
	MUSIK_PLAYLIST_CONTEXT_PLAY_INSTANTLY,
	MUSIK_PLAYLIST_CONTEXT_PLAY_ASNEXT,
	MUSIK_PLAYLIST_CONTEXT_PLAY_ENQUEUED,
	MUSIK_PLAYLIST_CONTEXT_PLAY_REPLACE_PLAYERLIST,
	MUSIK_PLAYLIST_CONTEXT_RATENODE,
	MUSIK_PLAYLIST_CONTEXT_UNRATED,
	MUSIK_PLAYLIST_CONTEXT_RATE1,
	MUSIK_PLAYLIST_CONTEXT_RATE2,
	MUSIK_PLAYLIST_CONTEXT_RATE3,
	MUSIK_PLAYLIST_CONTEXT_RATE4,
	MUSIK_PLAYLIST_CONTEXT_RATE5,
	MUSIK_PLAYLIST_CONTEXT_TAGNODE,
	MUSIK_PLAYLIST_CONTEXT_TAG_TITLE,
	MUSIK_PLAYLIST_CONTEXT_TAG_TRACKNUM,
	MUSIK_PLAYLIST_CONTEXT_TAG_ARTIST,
	MUSIK_PLAYLIST_CONTEXT_TAG_ALBUM,
	MUSIK_PLAYLIST_CONTEXT_TAG_GENRE,
	MUSIK_PLAYLIST_CONTEXT_TAG_YEAR,
	MUSIK_PLAYLIST_CONTEXT_DELETENODE,
	MUSIK_PLAYLIST_DELETE_CONTEXT_DELETE_FROM_PLAYLIST,
	MUSIK_PLAYLIST_DELETE_CONTEXT_DELETE_FILES,
	MUSIK_PLAYLIST_DELETE_CONTEXT_DELETE_FROM_DB,
	MUSIK_PLAYLIST_CONTEXT_RENAME_FILES,
	MUSIK_PLAYLIST_CONTEXT_RETAG_FILES,
	MUSIK_PLAYLIST_CONTEXT_DISPLAYNODE,
	MUSIK_PLAYLIST_DISPLAY_FIRST,
	MUSIK_PLAYLIST_DISPLAY_LAST = MUSIK_PLAYLIST_DISPLAY_FIRST + NPLAYLISTCOLUMNS - 1,
	MUSIK_PLAYLIST_DISPLAY_SMART,
	MUSIK_PLAYLIST_DISPLAY_FIT,

	//--- sources popup menu ---//
	MUSIK_SOURCE_CONTEXT_CREATE,
	MUSIK_SOURCE_CONTEXT_CREATE_CURRENT_PLAYLIST,
	MUSIK_SOURCE_CONTEXT_STANDARD_PLAYLIST,
	MUSIK_SOURCE_CONTEXT_DYNAMIC_PLAYLIST,
	MUSIK_SOURCE_CONTEXT_CREATE_NETSTREAM,
	MUSIK_SOURCE_CONTEXT_EDIT_QUERY,
	MUSIK_SOURCE_CONTEXT_RENAME,
	MUSIK_SOURCE_CONTEXT_DELETE,
	MUSIK_SOURCE_CONTEXT_SHOW_ICONS,
	MUSIK_SOURCE_CONTEXT_COPY_FILES,

	//--- library frame popup menu ---//
	MUSIK_PATHS_MENU_ADD,
	MUSIK_PATHS_MENU_REMOVESEL,
	MUSIK_PATHS_MENU_REMOVEALL,
	MUSIK_PATHS_MENU_CLEAR_LIBRARY,
	MUSIK_PATHS_MENU_UPDATE_LIBRARY,
	MUSIK_PATHS_MENU_REBUILD_LIBRARY,
	MUSIK_PATHS_MENU_PURGE_LIBRARY
    
};

enum EMUSIK_LIB_TYPE
{
	MUSIK_LIB_INVALID = -1,
	MUSIK_LIB_ARTIST = 0,
	MUSIK_LIB_ALBUM,
	MUSIK_LIB_GENRE,
	MUSIK_LIB_SONG,
	MUSIK_LIB_YEAR,
	MUSIK_LIB_DECADE
};

enum EMUSIK_FORMAT_TYPE
{
	MUSIK_FORMAT_INVALID = -1,
	MUSIK_FORMAT_MP3 = 0,
	MUSIK_FORMAT_OGG,
	MUSIK_FORMAT_MOD,
	MUSIK_FORMAT_WAV,
	MUSIK_FORMAT_WMA,
	MUSIK_FORMAT_AIFF,
	MUSIK_FORMAT_NETSTREAM
};

enum EMUSIK_ACTIVITY_TYPE
{
	MUSIK_LBTYPE_NULL = 0,
	MUSIK_LBTYPE_ARTISTS,
	MUSIK_LBTYPE_ALBUMS,
	MUSIK_LBTYPE_GENRES,
	MUSIK_LBTYPE_YEARS
};

enum EMUSIK_PLAYMODE
{
	MUSIK_PLAYMODE_NORMAL = 0,
	MUSIK_PLAYMODE_LOOPSONG,
	MUSIK_PLAYMODE_LOOPLIST,
	MUSIK_PLAYMODE_SHUFFLE,
	MUSIK_PLAYMODE_AUTO_DJ

};

const size_t ActivityBoxesMaxCount = 4;
#endif//MUSIKDEFINES_H
